
// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview Resume parsing AI agent.
 *
 * - parseResume - A function that handles the resume parsing process.
 * - ParseResumeInput - The input type for the parseResume function.
 * - ParseResumeOutput - The return type for the parseResume function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const ParseResumeInputSchema = z.object({
  resumeDataUri: z
    .string()
    .describe(
      "A resume file (text document or video), as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'."
    ),
});
export type ParseResumeInput = z.infer<typeof ParseResumeInputSchema>;

const ParseResumeOutputSchema = z.object({
  skills: z.array(z.string()).describe('A list of skills extracted from the resume content.'),
  experience: z
    .array(
      z.object({
        title: z.string().describe('The job title.'),
        company: z.string().describe('The company name.'),
        dates: z.string().describe('The start and end dates of the job.'),
        description: z.string().describe('A description of the job responsibilities.'),
      })
    )
    .describe('A list of job experiences extracted from the resume content.'),
  education: z
    .array(
      z.object({
        degree: z.string().describe('The degree name.'),
        institution: z.string().describe('The institution name.'),
        dates: z.string().describe('The start and end dates of the education.'),
      })
    )
    .describe('A list of education experiences extracted from the resume content.'),
});
export type ParseResumeOutput = z.infer<typeof ParseResumeOutputSchema>;

export async function parseResume(input: ParseResumeInput): Promise<ParseResumeOutput> {
  return parseResumeFlow(input);
}

const prompt = ai.definePrompt({
  name: 'parseResumePrompt',
  input: {schema: ParseResumeInputSchema},
  output: {schema: ParseResumeOutputSchema},
  prompt: `You are an expert resume parser. You will be provided with either a text-based document (like a PDF or DOCX) or a video file. Your goal is to extract skills, experience, and education from the provided content.

Content: {{media url=resumeDataUri}}

If the content is a text document, parse it as a standard resume.

If the content is a video, attempt to extract the following information primarily from any spoken audio or clearly visible on-screen text:
- Skills mentioned or demonstrated.
- Professional experiences described (job titles, companies, responsibilities, dates if mentioned).
- Educational background mentioned (degrees, institutions, dates if mentioned).

If it's a video and you cannot reliably extract some sections, you may leave them as empty arrays or provide a brief note like "Information not found in video" for string fields if appropriate for the schema. Strive to adhere to the output schema.

Output the extracted information in the structured format requested.

Skills:
{{#each skills}}
- {{this}}
{{/each}}

Experience:
{{#each experience}}
- Title: {{title}}
  Company: {{company}}
  Dates: {{dates}}
  Description: {{description}}
{{/each}}

Education:
{{#each education}}
- Degree: {{degree}}
  Institution: {{institution}}
  Dates: {{dates}}
{{/each}}`,
});

const parseResumeFlow = ai.defineFlow(
  {
    name: 'parseResumeFlow',
    inputSchema: ParseResumeInputSchema,
    outputSchema: ParseResumeOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
